#!/usr/bin/env python3
import re
import sys
import urllib3
import json
from unidecode import unidecode

sys.path.append('/opt/ucloud/extensions/lib')
urllib3.disable_warnings()

from ipa import *
from ess import *
from slurm import *
from common import *

# =====================================================================================================================
# Configuration
# =====================================================================================================================

FREE_CORE_HOURS = 10
FREE_QUOTA_GIGS = 10

ESS_FILE_SYSTEM = 'ess1'
ESS_PATH_PREFIX = '/gpfs/ess1/work/'

# =====================================================================================================================
# Loading request
# =====================================================================================================================

with open(sys.argv[1]) as fp:
    request = json.load(fp)

request_type = request['type']

# =====================================================================================================================
# Utilities
# =====================================================================================================================

def make_group_name_unique(u):
    un = u
    result = ipa_group_find({'group' : un})
    groups = result['groups']
    ext = 0

    while len(groups) == 1:
        ext = ext + 1
        un = f'{u}{ext:02}'
        result = ipa_group_find({'group' : un})
        groups = result['groups']

    return un

def generate_name(ucloud_title, allocated_gid):
    name = unidecode(ucloud_title)
    name = name.replace(' ', '_')
    name = re.sub('\W+', '', name).lower()
    name = re.sub('_+', '_', name)
    name = name[0:28].strip('_')
    return name

def add_user_to_group(uid, gid):
    group = get_group_by_gid(gid)
    if group is None:
        return
    user = get_username_by_uid(uid)
    if user is None:
        return
    ipa_group_add_user({ 'user' : user, 'group' : group })
    slurm_account_add_user({ 'account' : group, 'user' : user })
    clear_sssd_cache()

def remove_user_from_group(uid, gid):
    group = get_group_by_gid(gid)
    if group is None:
        return
    user = get_username_by_uid(uid)
    if user is None:
        return
    ipa_group_remove_user({ 'user' : user, 'group' : group })
    slurm_account_remove_user({ 'account' : group, 'user' : user })

# =====================================================================================================================
# Authenticate with services
# =====================================================================================================================

with open('/etc/ucloud/ess.json') as fp:
    config = json.load(fp)

auth_ok = ess_authenticate(config['username'], config['password'], config['server'])
if not auth_ok:
    print('Could not authenticate with ESS')
    exit(1)

with open('/etc/ucloud/ipa.json') as fp:
    config = json.load(fp)

auth_ok = ipa_authenticate(config['username'], config['password'], config['server'], config['cert'])
if not auth_ok:
    print('Could not authenticate with IPA')
    exit(1)

# =====================================================================================================================
# Event handler
# =====================================================================================================================

if request_type == 'project_renamed':
    gid = request['newProject']['localId']
    if request['oldProject'] is None:
        ucloud_project_id = request['newProject']['project']['id']
        name = generate_name(request['newTitle'], gid)
        name = make_group_name_unique(name)

        args = {
            'group' : name,
            'gid' : gid,
            'description' : f'UCloud Project: {id}'
        }
        ipa_group_create(args)
        clear_sssd_cache()

        args = {
            'account' : name,
            'credits' : FREE_CORE_HOURS * 60,
            'description' : f'UCloud Project: {ucloud_project_id}',
            'organization' : 'ucloud'
        }
        slurm_account_create(args)

        args = {
            'filesystem' : ESS_FILE_SYSTEM,
            'fileset' : f'work-{name}',
            'parent' : 'root',
            'path' : f'{ESS_PATH_PREFIX}{name}',
            'owner' : f'root:{name}',
            'permissions' : '2770'
        }
        ess_fileset_create(args)

        args = {
            'filesystem' : ESS_FILE_SYSTEM,
            'fileset' : f'work-{name}',
            'space' : f'{FREE_QUOTA_GIGS}G',
            'files' : '0'
        }
        ess_fileset_quota(args)

elif request_type == 'members_added_to_project':
    gid = request['newProject']['localId']
    for member in request['newMembers']:
        uid = member['uid']
        if uid is None:
            continue
        add_user_to_group(uid, gid)

elif request_type == 'members_removed_from_project':
    gid = request['newProject']['localId']
    for member in request['removedMembers']:
        uid = member['uid']
        if uid is None:
            continue
        remove_user_from_group(uid, gid)

print('{}')
