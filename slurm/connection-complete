#!/usr/bin/env python3
import sys
import os
import urllib3
import json
from unidecode import unidecode

sys.path.append('/opt/ucloud/extensions/lib')
urllib3.disable_warnings()

from ipa import *
from ess import *
from slurm import *
from common import *

# =====================================================================================================================
# Configuration
# =====================================================================================================================

FREE_CORE_HOURS = 10
FREE_QUOTA_GIGS = 10

ESS_FILE_SYSTEM = 'ess1'
ESS_PATH_PREFIX = '/gpfs/ess1/home/'

# =====================================================================================================================
# Utilities
# =====================================================================================================================

def parse_ucloud_username(u):
    u = unidecode(u)
    a = u.split('#')

    u = a[0]
    id = ''
    if len(a) == 2:
        id = a[1]
    if u.isupper():
        u = u.lower()

    builder = ''
    names = []
    dash = False
    for c in u:
        if c.isupper() and builder and not dash:
            names.append(builder)
            builder = c
            dash = False
        elif c == '-' or c == '\'':
            dash = True
            builder += c
        else:
            builder += c
            dash = False
    names.append(builder)

    if len(names) == 1:
        u = names[0]
        first = names[0].capitalize()
        last = 'Unknown'
    else:
        first = ' '.join(names[:-1])
        last = names[-1]
        u = names[0][0] + names[-1]

    u = re.sub('\W+', '', u).lower()
    u = u[0:28]

    return { 'first' : first, 'last' : last, 'user' : u }

def find_ucloud_username(u):
    result = ipa_user_find({'employeenumber' : u})
    users = result['users']

    if len(users) == 0:
        return False

    if len(users) > 1:
        raise Exception('result must be unique, but multiple values returned')

    return users[0]

def make_username_unique(u):
    un = u
    result = ipa_user_find({'user' : un})
    users = result['users']
    ext = 0

    while len(users) == 1:
        ext = ext + 1
        un = f'{u}{ext:02}'
        result = ipa_user_find({'user' : un})
        users = result['users']

    return un

# =====================================================================================================================
# Authenticate with services
# =====================================================================================================================

with open('/etc/ucloud/ess.json') as fp:
    config = json.load(fp)

auth_ok = ess_authenticate(config['username'], config['password'], config['server'])
if not auth_ok:
    print('Could not authenticate with ESS')
    exit(1)

with open('/etc/ucloud/ipa.json') as fp:
    config = json.load(fp)

auth_ok = ipa_authenticate(config['username'], config['password'], config['server'], config['cert'])
if not auth_ok:
    print('Could not authenticate with IPA')
    exit(1)

# =====================================================================================================================
# Query system for existing user
# =====================================================================================================================

with open(sys.argv[1]) as fp:
    request = json.load(fp)

ucloud_identity = request.get('ucloudIdentity') or request.get('username')
username = find_ucloud_username(ucloud_identity)

if username:
    result = ipa_user_query({ 'user' : username })
    response = { 'uid' : result.get('uid'), 'gid' : result.get('gid') }
    print(json.dumps(response))
    exit(0)

# =====================================================================================================================
# Prepare information about desired user
# =====================================================================================================================

result = parse_ucloud_username(ucloud_identity)
username = result.get('user')
username = make_username_unique(username)

first = request.get('givenName') or result.get('first')
last = request.get('familyName') or result.get('last')
mail = request.get('email') or 'unknown@localhost.local' # TODO(Dan): UCloud connection plugin will never return this info

# =====================================================================================================================
# Creation of: IPA user
# =====================================================================================================================

args = {
    'user' : username,
    'firstname' : first,
    'lastname' : last,
    'email' : mail,
    'employeenumber' : ucloud_identity
}
result = ipa_user_create(args)
response = {
    'uid' : result.get('uid'),
    'gid' : result.get('gid')
}

args = {
    'group' : 'ucloud_users',
    'user' : username
}
ipa_group_add_user(args)

# =====================================================================================================================
# Creation of: Slurm account
# =====================================================================================================================

args = {
    'account' : username,
    'credits' : FREE_CORE_HOURS * 60,
    'description' : f'Personal workspace of {username}',
    'organization' : 'ucloud'
}
slurm_account_create(args)

args = {
    'account' : username,
    'user' : username
}
slurm_user_create(args)

# =====================================================================================================================
# Creation of: Home fileset
# =====================================================================================================================

args = {
    'filesystem' : ESS_FILE_SYSTEM,
    'fileset' : f'home-{username}',
    'parent' : 'home',
    'path' : f'{ESS_PATH_PREFIX}{username}',
    'owner' : f'{username}:{username}',
    'permissions' : '700'
}
ess_fileset_create(args)

args = {
    'filesystem' : ESS_FILE_SYSTEM,
    'fileset' : f'home-{username}',
    'space' : f'{FREE_QUOTA_GIGS}G',
    'files' : '0'
}
ess_fileset_quota(args)

# =====================================================================================================================
# Return information about created resources
# =====================================================================================================================

print(json.dumps(response))
